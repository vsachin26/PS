{"ast":null,"code":"var _jsxFileName = \"D:\\\\capturing\\\\src\\\\components\\\\LoginPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom'; // Import useNavigate for navigation\n// import './LoginPage.css';\n\n// const LoginPage = () => {\n//   const [isRegistering, setIsRegistering] = useState(false);\n//   const [formData, setFormData] = useState({\n//     username: '',\n//     password: '',\n//   });\n//   const [message, setMessage] = useState('');\n//   const navigate = useNavigate(); // Initialize useNavigate\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     const endpoint = isRegistering\n//       ? 'http://localhost:5000/api/register'\n//       : 'http://localhost:5000/api/login';\n\n//     try {\n//       const response = await fetch(endpoint, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(formData),\n//       });\n\n//       const contentType = response.headers.get('content-type');\n//       if (!contentType || !contentType.includes('application/json')) {\n//         throw new Error('Server returned invalid response format (not JSON)');\n//       }\n\n//       const result = await response.json();\n\n//       if (!response.ok) {\n//         throw new Error(result.message || 'Something went wrong!');\n//       }\n\n//       setMessage(isRegistering ? 'Registration successful!' : 'Login successful!');\n\n//       if (!isRegistering) {\n//         // Navigate to the Analysis page on successful login\n//         navigate('/analysis');\n//       }\n//     } catch (error) {\n//       setMessage(error.message);\n//     }\n//   };\n\n//   return (\n//     <div className=\"login-page\">\n//       <h1>{isRegistering ? 'Register' : 'Login'}</h1>\n//       <form onSubmit={handleSubmit} className=\"login-form\">\n//         <div className=\"form-group\">\n//           <label>\n//             Username:\n//             <input\n//               type=\"text\"\n//               name=\"username\"\n//               value={formData.username}\n//               onChange={handleInputChange}\n//               required\n//             />\n//           </label>\n//         </div>\n//         <div className=\"form-group\">\n//           <label>\n//             Password:\n//             <input\n//               type=\"password\"\n//               name=\"password\"\n//               value={formData.password}\n//               onChange={handleInputChange}\n//               required\n//             />\n//           </label>\n//         </div>\n//         <button type=\"submit\">{isRegistering ? 'Register' : 'Login'}</button>\n//       </form>\n//       <p className=\"message\">{message}</p>\n//       <button\n//         onClick={() => {\n//           setIsRegistering((prev) => !prev);\n//           setMessage('');\n//         }}\n//       >\n//         {isRegistering ? 'Switch to Login' : 'Switch to Register'}\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\n\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom'; // Import useNavigate for navigation\n// import './LoginPage.css';\n\n// const LoginPage = () => {\n//   const [formData, setFormData] = useState({\n//     username: '',\n//     password: '',\n//   });\n//   const [message, setMessage] = useState('');\n//   const navigate = useNavigate(); // Initialize useNavigate\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     const endpoint = 'http://localhost:5000/api/login';\n\n//     try {\n//       const response = await fetch(endpoint, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(formData),\n//       });\n\n//       const contentType = response.headers.get('content-type');\n//       if (!contentType || !contentType.includes('application/json')) {\n//         throw new Error('Server returned invalid response format (not JSON)');\n//       }\n\n//       const result = await response.json();\n\n//       if (!response.ok) {\n//         throw new Error(result.message || 'Something went wrong!');\n//       }\n\n//       setMessage('Login successful!');\n\n//       // Navigate to the Analysis page on successful login\n//       navigate('/analysis');\n//     } catch (error) {\n//       setMessage(error.message);\n//     }\n//   };\n\n//   return (\n//     <div className=\"login-page\">\n//       <h1>Login</h1>\n//       <form onSubmit={handleSubmit} className=\"login-form\">\n//         <div className=\"form-group\">\n//           <label>\n//             Username:\n//             <input\n//               type=\"text\"\n//               name=\"username\"\n//               value={formData.username}\n//               onChange={handleInputChange}\n//               required\n//             />\n//           </label>\n//         </div>\n//         <div className=\"form-group\">\n//           <label>\n//             Password:\n//             <input\n//               type=\"password\"\n//               name=\"password\"\n//               value={formData.password}\n//               onChange={handleInputChange}\n//               required\n//             />\n//           </label>\n//         </div>\n//         <button type=\"submit\">Login</button>\n//       </form>\n//       <p className=\"message\">{message}</p>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './LoginPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    username: '',\n    password: ''\n  });\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate(); // Initialize useNavigate\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const endpoint = 'http://localhost:5000/api/login';\n    try {\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        throw new Error('Server returned invalid response format (not JSON)');\n      }\n      const result = await response.json();\n      if (!response.ok) {\n        throw new Error(result.message || 'Something went wrong!');\n      }\n      setMessage('Login successful!');\n\n      // Navigate to the Analysis page on successful login\n      navigate('/analysis');\n    } catch (error) {\n      setMessage(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"login-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Username:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"username\",\n              value: formData.username,\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              name: \"password\",\n              value: formData.password,\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"EgEKIVgpcJeDxgXxrxJAYnsyG5k=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","LoginPage","_s","formData","setFormData","username","password","message","setMessage","navigate","handleInputChange","e","name","value","target","prev","handleSubmit","preventDefault","endpoint","response","fetch","method","headers","body","JSON","stringify","contentType","get","includes","Error","result","json","ok","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","required","_c","$RefreshReg$"],"sources":["D:/capturing/src/components/LoginPage.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom'; // Import useNavigate for navigation\r\n// import './LoginPage.css';\r\n\r\n// const LoginPage = () => {\r\n//   const [isRegistering, setIsRegistering] = useState(false);\r\n//   const [formData, setFormData] = useState({\r\n//     username: '',\r\n//     password: '',\r\n//   });\r\n//   const [message, setMessage] = useState('');\r\n//   const navigate = useNavigate(); // Initialize useNavigate\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData((prev) => ({ ...prev, [name]: value }));\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     const endpoint = isRegistering\r\n//       ? 'http://localhost:5000/api/register'\r\n//       : 'http://localhost:5000/api/login';\r\n\r\n//     try {\r\n//       const response = await fetch(endpoint, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(formData),\r\n//       });\r\n\r\n//       const contentType = response.headers.get('content-type');\r\n//       if (!contentType || !contentType.includes('application/json')) {\r\n//         throw new Error('Server returned invalid response format (not JSON)');\r\n//       }\r\n\r\n//       const result = await response.json();\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(result.message || 'Something went wrong!');\r\n//       }\r\n\r\n//       setMessage(isRegistering ? 'Registration successful!' : 'Login successful!');\r\n\r\n//       if (!isRegistering) {\r\n//         // Navigate to the Analysis page on successful login\r\n//         navigate('/analysis');\r\n//       }\r\n//     } catch (error) {\r\n//       setMessage(error.message);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"login-page\">\r\n//       <h1>{isRegistering ? 'Register' : 'Login'}</h1>\r\n//       <form onSubmit={handleSubmit} className=\"login-form\">\r\n//         <div className=\"form-group\">\r\n//           <label>\r\n//             Username:\r\n//             <input\r\n//               type=\"text\"\r\n//               name=\"username\"\r\n//               value={formData.username}\r\n//               onChange={handleInputChange}\r\n//               required\r\n//             />\r\n//           </label>\r\n//         </div>\r\n//         <div className=\"form-group\">\r\n//           <label>\r\n//             Password:\r\n//             <input\r\n//               type=\"password\"\r\n//               name=\"password\"\r\n//               value={formData.password}\r\n//               onChange={handleInputChange}\r\n//               required\r\n//             />\r\n//           </label>\r\n//         </div>\r\n//         <button type=\"submit\">{isRegistering ? 'Register' : 'Login'}</button>\r\n//       </form>\r\n//       <p className=\"message\">{message}</p>\r\n//       <button\r\n//         onClick={() => {\r\n//           setIsRegistering((prev) => !prev);\r\n//           setMessage('');\r\n//         }}\r\n//       >\r\n//         {isRegistering ? 'Switch to Login' : 'Switch to Register'}\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default LoginPage;\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom'; // Import useNavigate for navigation\r\n// import './LoginPage.css';\r\n\r\n// const LoginPage = () => {\r\n//   const [formData, setFormData] = useState({\r\n//     username: '',\r\n//     password: '',\r\n//   });\r\n//   const [message, setMessage] = useState('');\r\n//   const navigate = useNavigate(); // Initialize useNavigate\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData((prev) => ({ ...prev, [name]: value }));\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     const endpoint = 'http://localhost:5000/api/login';\r\n\r\n//     try {\r\n//       const response = await fetch(endpoint, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(formData),\r\n//       });\r\n\r\n//       const contentType = response.headers.get('content-type');\r\n//       if (!contentType || !contentType.includes('application/json')) {\r\n//         throw new Error('Server returned invalid response format (not JSON)');\r\n//       }\r\n\r\n//       const result = await response.json();\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(result.message || 'Something went wrong!');\r\n//       }\r\n\r\n//       setMessage('Login successful!');\r\n\r\n//       // Navigate to the Analysis page on successful login\r\n//       navigate('/analysis');\r\n//     } catch (error) {\r\n//       setMessage(error.message);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"login-page\">\r\n//       <h1>Login</h1>\r\n//       <form onSubmit={handleSubmit} className=\"login-form\">\r\n//         <div className=\"form-group\">\r\n//           <label>\r\n//             Username:\r\n//             <input\r\n//               type=\"text\"\r\n//               name=\"username\"\r\n//               value={formData.username}\r\n//               onChange={handleInputChange}\r\n//               required\r\n//             />\r\n//           </label>\r\n//         </div>\r\n//         <div className=\"form-group\">\r\n//           <label>\r\n//             Password:\r\n//             <input\r\n//               type=\"password\"\r\n//               name=\"password\"\r\n//               value={formData.password}\r\n//               onChange={handleInputChange}\r\n//               required\r\n//             />\r\n//           </label>\r\n//         </div>\r\n//         <button type=\"submit\">Login</button>\r\n//       </form>\r\n//       <p className=\"message\">{message}</p>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default LoginPage;\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './LoginPage.css';\r\n\r\nconst LoginPage = () => {\r\n  const [formData, setFormData] = useState({\r\n    username: '',\r\n    password: '',\r\n  });\r\n  const [message, setMessage] = useState('');\r\n  const navigate = useNavigate(); // Initialize useNavigate\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const endpoint = 'http://localhost:5000/api/login';\r\n\r\n    try {\r\n      const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n\r\n      const contentType = response.headers.get('content-type');\r\n      if (!contentType || !contentType.includes('application/json')) {\r\n        throw new Error('Server returned invalid response format (not JSON)');\r\n      }\r\n\r\n      const result = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(result.message || 'Something went wrong!');\r\n      }\r\n\r\n      setMessage('Login successful!');\r\n\r\n      // Navigate to the Analysis page on successful login\r\n      navigate('/analysis');\r\n    } catch (error) {\r\n      setMessage(error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-page\">\r\n      <div className=\"login-container\">\r\n        <h1>Login</h1>\r\n        <form onSubmit={handleSubmit} className=\"login-form\">\r\n          <div className=\"form-group\">\r\n            <label>\r\n              Username:\r\n              <input\r\n                type=\"text\"\r\n                name=\"username\"\r\n                value={formData.username}\r\n                onChange={handleInputChange}\r\n                required\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>\r\n              Password:\r\n              <input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                value={formData.password}\r\n                onChange={handleInputChange}\r\n                required\r\n              />\r\n            </label>\r\n          </div>\r\n          <button type=\"submit\">Login</button>\r\n        </form>\r\n        <p className=\"message\">{message}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC;IACvCQ,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE;EACZ,CAAC,CAAC;EACF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMY,QAAQ,GAAGX,WAAW,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}